
=head1 NAME

XML::Compile::Schema::BuiltInTypes - Define handling of built-in data-types


=head1 INHERITANCE

 XML::Compile::Schema::BuiltInTypes
   is an Exporter


=head1 SYNOPSIS

 # Not for end-users
 use XML::Compile::Schema::BuiltInTypes qw/%builtin_types/;


=head1 DESCRIPTION

Different schema specifications specify different available types,
but there is a lot over overlap.  The L<XML::Compile::Schema::Specs|XML::Compile::Schema::Specs>
module defines the availability, but here the types are implemented.

The implementation certainly does not try to be minimal (using the
restriction rules as set in the schema specification), because that
would be too slow.

=head2 Any

=over 4

=item anySimpleType

=item anyType

Both any*Type built-ins can contain any kind of data.  Perl decides how
to represent the passed values.

=back

=head2 Single

=over 4

=item boolean

Contains C<true>, C<false>, C<1> (is true), or C<0> (is false).  Unchecked,
the actual value is used.  Otherwise, C<0> and C<1> are preferred for the
hash value and C<true> and C<false> in XML.

=back

=head2 Big Integers

Schema's define integer types which are derived from the C<decimal>
type.  These values can grow enormously large, and therefore can only be
handled correctly using Math::BigInt.  When the translator is
built with the C<sloppy_integers> option, this will simplify (speed-up)
the produced code considerably: all integers then shall be between
-2G and +2G.

=over 4 

=item integer

An integer with an undertermined, but maximally huge number of
digits.

=item negativeInteger

=item nonNegativeInteger

=item positiveInteger

=item nonPositiveInteger

=item long

A little bit shorter than an integer, but still up-to 19 digits.

=item unsignedLong

Value up-to 20 digits.

=item unsignedInt

Just too long to fit in Perl's ints.

=back

=head2 Integers

=over 4

=item int

=item short

Signed 16-bits value.

=item unsigned Short

unsigned 16-bits value.

=item byte

Signed 8-bits value.

=item unsignedByte

Unsigned 8-bits value.

=item precissionDecimal

PARTIAL IMPLEMENTATION.  Special values INF and NaN not handled.

=back

=head2 Floating-point

PARTIAL IMPLEMENTATION: INF, NaN not handled.  The C<float> is not limited
in size, but mapped on double.

=over 4

=item decimal

Decimals are painful: they can be very large, much larger than Perl's
internal floats.  The value is therefore kept as string.
Use Math::BigFloat when you need calculations.  You can also pass such
object here.

=item float

A small floating-point value.

=item double

A floating-point value.

=back

=head2 Binary

=over 4

=item base64binary

In the hash, it will be kept as binary data.  In XML, it will be
base64 encoded.

=item hexBinary

In the hash, it will be kept as binary data.  In XML, it will be
hex encoded, two hex digits per byte.

=back

=head2 Dates

=over 4

=item date

A day, represented in localtime as C<YYYY-MM-DD> or C<YYYY-MM-DD[-+]HH:mm>.
When a decimal value is passed, it is interpreted as C<time> value in UTC,
and will be formatted as required.  When reading, the date string will
not be parsed.

=item dateTime

A moment, represented in localtime as "date T time tz", where date is
C<YYYY-MM-DD>, time is C<HH:MM:SS> and optional, and time-zone tz
is either C<-HH:mm>, C<+HH:mm>, or C<Z> for UTC.

When a decimal value is passed, it is interpreted as C<time> value in UTC,
and will be formatted as required.  When reading, the date string will
not be parsed.

=item gDay

Format C<---12> or C<---12+9:00> (12 days, optional time-zone)

=item gMonth

Format C<--9> or C<--9+7:00> (9 months, optional time-zone)

=item gMonthDay

Format C<--9-12> or C<--9-12+7:00> (9 months 12 days, optional time-zone)

=item gYear

Format C<2006> or C<2006+7:00> (year 2006, optional time-zone)

=item gYearMonth

Format C<2006-11> or C<2006-11+7:00> (november 2006, optional time-zone)

=back

=head2 Duration

=over 4

=item duration

Format C<-PnYnMnDTnHnMnS>, where optional starting C<-> means negative.
The C<P> is obligatory, and the C<T> indicates start of a time part.
All other C<n[YMDHMS]> are optional.

=item dayTimeDuration

Format C<-PDTnHnMnS>, where optional starting C<-> means negative.
The C<P> is obligatory, and the C<T> indicates start of a time part.
All other C<n[DHMS]> are optional.

=item yearMonthDuration

Format C<-PnYnMn>, where optional starting C<-> means negative.
The C<P> is obligatory, the C<n[YM]> are optional.

=back

=head2 Strings

=over 4

=item string

(Usually utf8) string.

=item normalizedString

String where all sequence of white-spaces (including new-lines) are
interpreted as one blank.  Blanks at beginning and the end of the
string are ignored.

=item language

An RFC3066 language indicator.

=item ID, IDREF, IDREFS

A label, reference to a label, or set of references.

PARTIAL IMPLEMENTATION: the validity of used characters is not checked.

=item NCName, ENTITY, ENTITIES

A name which contains no colons (a non-colonized name).

=item Name

=item token, NMTOKEN, NMTOKENS

=back

=head2 URI

=over 4

=item anyURI

You may pass a string or, for instance, an URI object which will be
stringified into an URI.  When read, the data will not automatically
be translated into an URI object: it may not be used that way.

=item QName

A qualified type name: a type name with optional prefix.

=item NOTATION

NOT IMPLEMENTED, so treated as string.

=back











=head1 REFERENCES

See the XML::Compile website at L<http://perl.overmeer.net/xml-compile/> for more details.

=head1 COPYRIGHTS

Module version 0.01.
Written by Mark Overmeer (mark@overmeer.net).  See the ChangeLog for
other contributors.

Copyright (c) 2006 by the author(s). All rights reserved.  This program
is free software; you can redistribute it and/or modify it under the
same terms as Perl itself.


