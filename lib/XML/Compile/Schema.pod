
=head1 NAME

XML::Compile::Schema - Compile a schema


=head1 INHERITANCE

 XML::Compile::Schema
   is a XML::Compile


=head1 SYNOPSIS

 # preparation
 my $parser = XML::LibXML->new;
 my $tree   = $parser->parse...(...);

 my $schema = XML::Compile::Schema->new($tree);
 my $index  = $schema->types(namespace => 'EXPANDED');
 foreach (keys %$index) {...}

 my $schema = XML::Compile::Schema->new($xml_string);
 my $read   = $schema->compile(READER => 'mytype');
 my $hash   = $read->($xml);
 
 my $doc    = XML::LibXML::Document->new('1.0', 'UTF-8');
 my $write  = $schema->compile(WRITER => 'mytype');
 my $xml    = $write->($doc, $hash);
 print $xml->toString;


=head1 DESCRIPTION

This module collects knowledge about a schema.  The most important
method is L<compile()|XML::Compile::Schema/"Compilers"> which can create XML file readers and writers
based on the schema information and some selected type.

The compiler is implemented in L<XML::Compile::Schema::Translate|XML::Compile::Schema::Translate>.
See that manual page about the specific behavior.

Be warned that the B<schema is not validated>!  In some cases the produced
parser will produce compile-time and run-time errors, but typically only
in cases that the parser has no idea what to do with such a mistake.
On the other hand, the B<input data is validated>: the output should
follow the specs closely.

Two implementations use the translator, and more can be added later.  Both
get created with the L<compile()|XML::Compile::Schema/"Compilers"> method.


=over 4

=item XML Reader

The XML reader produces a hash from a XML::LibXML::Node tree, or an
XML string.  The values are checked and will be ignored if the value is
not according to the specs.

=item XML Writer

The writer produces schema compliant XML, based on a hash.  To get the
data encoding correct, you are required to pass a document in which the
XML nodes may get a place later.

=back



=head1 METHODS


=head2 Constructors


$obj-E<gt>B<new>(TOP, OPTIONS)

=over 4

See L<XML::Compile/"Constructors">

=back

=head2 Accessors


$obj-E<gt>B<top>

=over 4

See L<XML::Compile/"Accessors">

=back

=head2 Filters


$obj-E<gt>B<walkTree>(NODE, CODE)

=over 4

See L<XML::Compile/"Filters">

=back

=head2 Compilers


$obj-E<gt>B<compile>(('READER'|'WRITER'), TYPE, OPTIONS)

=over 4

Translate the specified TYPE into a CODE reference which is able to
translate between XML-text and a HASH.  The TYPE is either an EXPANDED
or a LOCAL type name, and indicates the starting-point for processing
in the scheme.

When a READER is created, a CODE reference is returned which needs
to be called with parsed XML (an L<XML::LibXML::Node>) or an XML text.
Returned is a nested HASH structure which contains the data from
contained in the XML.  When a simple element type is addressed, you
will get a single value back,

When a WRITER is created, a CODE reference is returned which needs
to be called with a HASH, and returns a XML::LibXML::Node.

Most options below are explained in more detailed in the manual-page
L<XML::Compile::Schema::Translate|XML::Compile::Schema::Translate>.

-Option            --Defined in     --Default
 check_occurs                         <true>
 check_values                         <true>
 ignore_facets                        C<false>
 ignore_namespaces                    <false>
 include_namespaces                   <true>
 invalid                              DIE
 namespace_reset                      <false>
 output_namespaces                    {}
 path                                 <expanded name of type>
 sloppy_integers                      <false>

. check_occurs BOOLEAN

=over 4

Whether code will be produced to complain about elements which
should or should not appear, and is between bounds or not.

=back

. check_values BOOLEAN

=over 4

Whether code will be produce to check that the XML fields contain
the expected data format.

Turning this off will improve the processing significantly, but is
(of course) much less unsafer.  Do not set it off when you expect
data from external sources.

=back

. ignore_facets BOOLEAN

=over 4

Facets influence the formatting and range of values. This does
not come cheap, so can be turned off.  Affects the restrictions
set for a simpleType.

=back

. ignore_namespaces BOOLEAN

=over 4

Do not use name-space prefixes on the WRITER output.

=back

. include_namespaces BOOLEAN

=over 4

Indicates whether the WRITER should include the prefix to namespace
translation on the top-level element of the returned tree.  If not,
you may continue with the same name-space table to combine various
XML components into one, and add the namespaces later.

=back

. invalid 'IGNORE','WARN','DIE',CODE

=over 4

What to do in invalid values (ignored when not checking). See
L<invalidsErrorHandler()|XML::Compile::Schema/"Helpers"> who initiates this handler.

=back

. namespace_reset BOOLEAN

=over 4

Use the same prefixes in C<output_namespaces> as with some other compiled
piece, but reset the counts to zero first.

=back

. output_namespaces HASH

=over 4

Can be used to predefine an output namespace (when 'WRITER') for instance
to reserve common abbreviations like C<soap> for external use.  Each
entry in the hash has as key the namespace uri.  The value is a hash
which contains C<uri>, C<prefix>, and C<used> fields.  Pass a reference
to a private hash to catch this index.

=back

. path STRING

=over 4

Prepended to each error report, to indicate the location of the
error in the XML-Scheme tree.

=back

. sloppy_integers BOOLEAN

=over 4

The C<decimal> and C<integer> types must support at least 18 digits,
which is larger than Perl's 32 bit internal integers.  Therefore, the
implementation will use Math::BigInt objects to handle them.  However,
often an simple C<int> type whould have sufficed, but the XML designer
was lazy.  A long is much faster to handle.  Set this flag to use C<int>
as fast (but inprecise) replacements.

Be aware that C<Math::BigInt> and C<Math::BigFloat> objects are nearly
but not fully transparent mimicing the behavior of Perl's ints and
floats.  See their respective manual-pages.  Especially when you wish
for some performance, you should optimize access to these objects to
avoid expensive copying.

=back

I<Example:> create an XML reader


 my $msgin  = $rules->compile(READER => 'myns#mytype');
 my $xml    = $parser->parse("some-xml.xml");
 my $hash   = $msgin->($xml);

or
 my $hash   = $msgin->($xml_string);

I<Example:> create an XML writer


 my $msgout = $rules->compile(WRITER => 'myns#mytype');
 my $xml    = $msgout->($hash);
 print $xml->toString;

=back

$obj-E<gt>B<printTypes>

=over 4

For debugging: table of found types, sorted by name-space

=back

$obj-E<gt>B<template>(OPTIONS)

=over 4

This method will try to produce a HASH template, to express how
Perl's side of the data structure could look like.
NOT IMPLEMENTED YET

=back

$obj-E<gt>B<types>(OPTIONS)

=over 4

Returns all defined types in the schema.  In list context, you only
get the names of the defined types.  In scalar context, a hash is
returned with detailed information about each type.

-Option   --Defined in--Default
 namespace              'EXPANDED'

. namespace 'EXPANDED'|'PREFIXED'|'LOCAL'

=over 4

How to index the type-names.  Only C<EXPANDED> is safe, because the
other suffer from name-space conflicts... but produce a more readible
output.

=back

=back

$obj-E<gt>B<typesPerNamespace>

=over 4

Returns a hash of hashes, on the first level the name-space, on the
second the local names.

=back

=head2 Helpers


$obj-E<gt>B<invalidsErrorHandler>('IGNORE','USE'.'WARN','DIE',CODE)

=over 4

What to do when a validation error appears during validation?  This method
translates all string options into a single code reference which is
returned.  Please use the C<invalid> options of L<compile()|XML::Compile::Schema/"Compilers">
which will call this method indirectly.

When C<IGNORE> is specified, the process will ignore the specified
value as if it was not specified at all.  C<USE> will not complain,
and use the value found. With C<WARN>, it will continue with the value
but a warning is printed first.  On C<DIE> it will stop processing,
as will the program (catch it with C<eval>).

When a CODE reference is specified, that will be called specifying
the type path, actual type expected (expanded name), the errorneous
value, and an error string.

=back

$obj-E<gt>B<type>(EXPANDED|LOCAL)

=over 4

Returns the type definition in this scheme, either specified as EXPANDED
type name or as LOCAL type name.  Returns C<undef> then not available.
The LOCAL name is usually safe, but not always and therefore can better
be avoided.

I<Example:> 

 my $def = $schema->type('http://www.w3.org/2001/XMLSchema#integer');
 my $def = $schema->type('integer');

=back









=head1 REFERENCES

See the XML::Compile website at L<http://perl.overmeer.net/xml-compile/> for more details.

=head1 COPYRIGHTS

Module version 0.01.
Written by Mark Overmeer (mark@overmeer.net).  See the ChangeLog for
other contributors.

Copyright (c) 2006 by the author(s). All rights reserved.  This program
is free software; you can redistribute it and/or modify it under the
same terms as Perl itself.


